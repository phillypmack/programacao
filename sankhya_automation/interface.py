"""
M√≥dulo para interface de usu√°rio da aplica√ß√£o.
...
"""

import logging
from datetime import datetime
from typing import Tuple, Optional, List, Dict, Any

# ... (outros m√©todos da classe continuam iguais) ...

class InterfaceUsuario:
    # ... (exibir_cabecalho, validar_data, etc. continuam aqui) ...
    @staticmethod
    def exibir_cabecalho():
        """
        Exibe o cabe√ßalho da aplica√ß√£o.
        """
        print("=" * 70)
        print("    APLICA√á√ÉO PARA AUTOMA√á√ÉO DE ORDENS DE PRODU√á√ÉO")
        print("                    Sistema Sankhya")
        print("=" * 70)
        print()
    
    @staticmethod
    def validar_data(data_str: str) -> bool:
        """
        Valida se a string de data est√° no formato DD/MM/YYYY.
        
        Args:
            data_str (str): String da data a ser validada
            
        Returns:
            bool: True se a data √© v√°lida, False caso contr√°rio
        """
        try:
            datetime.strptime(data_str, '%d/%m/%Y')
            return True
        except ValueError:
            return False
    
    @staticmethod
    def validar_numero_positivo(numero_str: str) -> bool:
        """
        Valida se a string representa um n√∫mero positivo.
        
        Args:
            numero_str (str): String do n√∫mero a ser validada
            
        Returns:
            bool: True se √© um n√∫mero positivo, False caso contr√°rio
        """
        try:
            numero = int(numero_str)
            return numero > 0
        except ValueError:
            return False
    
    @staticmethod
    def solicitar_data_planejamento() -> str:
        """
        Solicita ao usu√°rio a data do planejamento.
        
        Returns:
            str: Data do planejamento no formato DD/MM/YYYY
        """
        while True:
            print("üìÖ Data do Planejamento:")
            print("   Digite a data espec√≠fica para a qual a produ√ß√£o ser√° programada.")
            print("   Formato: DD/MM/YYYY (ex: 21/07/2025)")
            print()
            
            data = input("   Data: ").strip()
            
            if InterfaceUsuario.validar_data(data):
                return data
            else:
                print("   ‚ùå Data inv√°lida! Use o formato DD/MM/YYYY.")
                print()
    
    @staticmethod
    def solicitar_braco_producao() -> int:
        """
        Solicita ao usu√°rio o n√∫mero do bra√ßo de produ√ß√£o.
        
        Returns:
            int: N√∫mero do bra√ßo de produ√ß√£o
        """
        while True:
            print("üè≠ Bra√ßo de Produ√ß√£o:")
            print("   Digite o n√∫mero do bra√ßo que ser√° programado.")
            print("   Exemplo: 1, 2, 3, etc.")
            print()
            
            braco = input("   Bra√ßo: ").strip()
            
            if InterfaceUsuario.validar_numero_positivo(braco):
                return int(braco)
            else:
                print("   ‚ùå N√∫mero inv√°lido! Digite um n√∫mero positivo.")
                print()
    
    @staticmethod
    def solicitar_range_rodadas() -> Tuple[int, int]:
        """
        Solicita ao usu√°rio o range de rodadas a serem processadas.
        
        Returns:
            Tuple[int, int]: (rodada_inicial, rodada_final)
        """
        while True:
            print("üîÑ Range de Rodadas:")
            print("   Digite a rodada inicial e final a serem processadas.")
            print("   Exemplo: rodada inicial = 1, rodada final = 5")
            print()
            
            rodada_inicial = input("   Rodada inicial: ").strip()
            
            if not InterfaceUsuario.validar_numero_positivo(rodada_inicial):
                print("   ‚ùå Rodada inicial inv√°lida! Digite um n√∫mero positivo.")
                print()
                continue
            
            rodada_final = input("   Rodada final: ").strip()
            
            if not InterfaceUsuario.validar_numero_positivo(rodada_final):
                print("   ‚ùå Rodada final inv√°lida! Digite um n√∫mero positivo.")
                print()
                continue
            
            rodada_inicial_int = int(rodada_inicial)
            rodada_final_int = int(rodada_final)
            
            if rodada_inicial_int <= rodada_final_int:
                return rodada_inicial_int, rodada_final_int
            else:
                print("   ‚ùå A rodada inicial deve ser menor ou igual √† rodada final.")
                print()

    @staticmethod
    def coletar_parametros() -> Optional[Tuple[str, int, int, int]]:
        """
        Coleta todos os par√¢metros necess√°rios do usu√°rio.
        """
        InterfaceUsuario.exibir_cabecalho()
        
        data_planejamento = InterfaceUsuario.solicitar_data_planejamento()
        print()
        braco = InterfaceUsuario.solicitar_braco_producao()
        print()
        rodada_inicial, rodada_final = InterfaceUsuario.solicitar_range_rodadas()
        print()
        
        print("üìã Resumo dos Par√¢metros:")
        print(f"   Data do Planejamento: {data_planejamento}")
        print(f"   Bra√ßo de Produ√ß√£o: {braco}")
        print(f"   Range de Rodadas: {rodada_inicial} a {rodada_final}")
        print()
        
        confirmacao = input("   Confirma os par√¢metros? (s/n): ").strip().lower()
        
        if confirmacao in ['s', 'sim', 'y', 'yes']:
            return data_planejamento, braco, rodada_inicial, rodada_final
        else:
            print("   Opera√ß√£o cancelada pelo usu√°rio.")
            return None # Retorna None se o usu√°rio cancelar

    @staticmethod
    def exibir_progresso(mensagem: str, tipo: str = "info"):
        """Exibe mensagem de progresso formatada."""
        icones = {"info": "‚ÑπÔ∏è", "sucesso": "‚úÖ", "erro": "‚ùå", "aviso": "‚ö†Ô∏è"}
        icone = icones.get(tipo, "‚ÑπÔ∏è")
        print(f"{icone} {mensagem}")
    
    # --- M√âTODO ATUALIZADO ---
    @staticmethod
    def exibir_resumo_final(total_ops_criadas: int, total_falhas: int, 
                          ops_sucesso: List[Dict[str, Any]],
                          detalhes_falhas: List[Dict[str, Any]]):
        """
        Exibe o resumo final da execu√ß√£o, incluindo listas de sucesso e falha.
        """
        print()
        print("=" * 70)
        print("                    RESUMO FINAL DA EXECU√á√ÉO")
        print("=" * 70)
        print(f"‚úÖ Total de Ordens de Produ√ß√£o criadas: {total_ops_criadas}")
        print(f"‚ùå Total de falhas no processamento: {total_falhas}")
        print()

        # Mostra a lista de OPs criadas com sucesso
        if ops_sucesso:
            print("--- Ordens de Produ√ß√£o Criadas com Sucesso ---")
            print(f"{'NUPLAN':<15} | {'Ordem de Produ√ß√£o (IDIPROC)':<30}")
            print("-" * 50)
            for item in ops_sucesso:
                print(f"{item['nuplan']:<15} | {item['idiproc']:<30}")
            print()

        # Mostra a lista de falhas detalhadas
        if detalhes_falhas:
            print("--- Detalhes das Falhas ---")
            for falha in detalhes_falhas:
                print(f"  - NUPLAN: {falha.get('nuplan', 'N/A')}, Erro: {falha.get('erro', 'Desconhecido')}")
        
        print("=" * 70)
        print("Processo finalizado.")
        print()

    # ... (aguardar_enter e confirmar_continuacao continuam iguais) ...
    @staticmethod
    def aguardar_enter():
        """
        Aguarda o usu√°rio pressionar Enter para continuar.
        """
        input("Pressione Enter para continuar...")
    
    @staticmethod
    def confirmar_continuacao(mensagem: str) -> bool:
        """
        Solicita confirma√ß√£o do usu√°rio para continuar.
        
        Args:
            mensagem (str): Mensagem de confirma√ß√£o
            
        Returns:
            bool: True se o usu√°rio confirmou, False caso contr√°rio
        """
        print(f"‚ö†Ô∏è  {mensagem}")
        resposta = input("   Deseja continuar? (s/n): ").strip().lower()
        return resposta in ['s', 'sim', 'y', 'yes']